// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new metadata API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for metadata API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreatePolicy returns the permissions required to survey and remediate resources

Returns the permissions required to survey and remediate resources.
*/
func (a *Client) CreatePolicy(params *CreatePolicyParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePolicyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPolicy",
		Method:             "POST",
		PathPattern:        "/metadata/{provider}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePolicyCreated), nil

}

/*
GetResourceTypes lists the resource types supported by fugue

Lists the resource types supported by Fugue.
*/
func (a *Client) GetResourceTypes(params *GetResourceTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResourceTypes",
		Method:             "GET",
		PathPattern:        "/metadata/{provider}/resource_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResourceTypesOK), nil

}

/*
GetSwagger returns the open API 2 0 specification for this API

Returns the OpenAPI 2.0 specification for this API.
*/
func (a *Client) GetSwagger(params *GetSwaggerParams) (*GetSwaggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSwaggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSwagger",
		Method:             "GET",
		PathPattern:        "/swagger",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSwaggerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSwaggerOK), nil

}

/*
GetSwaggerUI returns a friendly user interface for the open API 2 0 specification for this API

Returns a friendly user interface for the OpenAPI 2.0 specification for this API.
*/
func (a *Client) GetSwaggerUI(params *GetSwaggerUIParams) (*GetSwaggerUIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSwaggerUIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSwaggerUI",
		Method:             "GET",
		PathPattern:        "/swagger/ui",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSwaggerUIReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSwaggerUIOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
