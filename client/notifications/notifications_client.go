// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new notifications API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for notifications API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateNotification creates a new notification

Creates a new notification.
*/
func (a *Client) CreateNotification(params *CreateNotificationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNotificationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNotification",
		Method:             "POST",
		PathPattern:        "/notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNotificationCreated), nil

}

/*
DeleteNotification deletes a notification

Deletes a notification.
*/
func (a *Client) DeleteNotification(params *DeleteNotificationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNotificationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNotification",
		Method:             "DELETE",
		PathPattern:        "/notifications/{notification_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNotificationNoContent), nil

}

/*
ListNotifications lists details for all notifications

Lists details for all notifications.
*/
func (a *Client) ListNotifications(params *ListNotificationsParams, authInfo runtime.ClientAuthInfoWriter) (*ListNotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNotifications",
		Method:             "GET",
		PathPattern:        "/notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListNotificationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListNotificationsOK), nil

}

/*
UpdateNotification updates an existing notification

Updates an existing notification.
*/
func (a *Client) UpdateNotification(params *UpdateNotificationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNotification",
		Method:             "PUT",
		PathPattern:        "/notifications/{notification_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNotificationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
