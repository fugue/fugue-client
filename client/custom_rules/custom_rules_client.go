// Code generated by go-swagger; DO NOT EDIT.

package custom_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new custom rules API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for custom rules API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateCustomRule creates a new custom rule

Create a new custom rule.

*/
func (a *Client) CreateCustomRule(params *CreateCustomRuleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCustomRuleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCustomRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCustomRule",
		Method:             "POST",
		PathPattern:        "/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCustomRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCustomRuleCreated), nil

}

/*
DeleteCustomRule deletes a custom rule

Delete a specified custom rule.

*/
func (a *Client) DeleteCustomRule(params *DeleteCustomRuleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCustomRule",
		Method:             "DELETE",
		PathPattern:        "/rules/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCustomRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCustomRuleNoContent), nil

}

/*
GetCustomRule gets details on a single custom rule

Get details on a single custom rule.

*/
func (a *Client) GetCustomRule(params *GetCustomRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCustomRule",
		Method:             "GET",
		PathPattern:        "/rules/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCustomRuleOK), nil

}

/*
ListCustomRules lists custom rules

Return a list of custom rules.

*/
func (a *Client) ListCustomRules(params *ListCustomRulesParams, authInfo runtime.ClientAuthInfoWriter) (*ListCustomRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCustomRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCustomRules",
		Method:             "GET",
		PathPattern:        "/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCustomRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListCustomRulesOK), nil

}

/*
UpdateCustomRule updates custom rule

Update configuration of a custom rule.

*/
func (a *Client) UpdateCustomRule(params *UpdateCustomRuleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCustomRule",
		Method:             "PATCH",
		PathPattern:        "/rules/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCustomRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCustomRuleOK), nil

}

/*
ValidateCustomRule validates a custom rule

Validate a custom rule using state from an environment.

*/
func (a *Client) ValidateCustomRule(params *ValidateCustomRuleParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCustomRuleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCustomRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCustomRule",
		Method:             "POST",
		PathPattern:        "/rules/validator/v1/{environment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCustomRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ValidateCustomRuleCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
