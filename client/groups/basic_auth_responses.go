// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fugue/fugue-client/models"
)

// BasicAuthReader is a Reader for the BasicAuth structure.
type BasicAuthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BasicAuthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBasicAuthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBasicAuthBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewBasicAuthUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewBasicAuthForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewBasicAuthNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewBasicAuthInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewBasicAuthOK creates a BasicAuthOK with default headers values
func NewBasicAuthOK() *BasicAuthOK {
	return &BasicAuthOK{}
}

/*BasicAuthOK handles this case with default header values.

User Group assignment updated.
*/
type BasicAuthOK struct {
}

func (o *BasicAuthOK) Error() string {
	return fmt.Sprintf("[PATCH /users][%d] basicAuthOK ", 200)
}

func (o *BasicAuthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBasicAuthBadRequest creates a BasicAuthBadRequest with default headers values
func NewBasicAuthBadRequest() *BasicAuthBadRequest {
	return &BasicAuthBadRequest{}
}

/*BasicAuthBadRequest handles this case with default header values.

Bad request error.
*/
type BasicAuthBadRequest struct {
	Payload *models.BadRequestError
}

func (o *BasicAuthBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /users][%d] basicAuthBadRequest  %+v", 400, o.Payload)
}

func (o *BasicAuthBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *BasicAuthBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBasicAuthUnauthorized creates a BasicAuthUnauthorized with default headers values
func NewBasicAuthUnauthorized() *BasicAuthUnauthorized {
	return &BasicAuthUnauthorized{}
}

/*BasicAuthUnauthorized handles this case with default header values.

Authentication error.
*/
type BasicAuthUnauthorized struct {
	Payload *models.AuthenticationError
}

func (o *BasicAuthUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /users][%d] basicAuthUnauthorized  %+v", 401, o.Payload)
}

func (o *BasicAuthUnauthorized) GetPayload() *models.AuthenticationError {
	return o.Payload
}

func (o *BasicAuthUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBasicAuthForbidden creates a BasicAuthForbidden with default headers values
func NewBasicAuthForbidden() *BasicAuthForbidden {
	return &BasicAuthForbidden{}
}

/*BasicAuthForbidden handles this case with default header values.

Authorization error.
*/
type BasicAuthForbidden struct {
	Payload *models.AuthorizationError
}

func (o *BasicAuthForbidden) Error() string {
	return fmt.Sprintf("[PATCH /users][%d] basicAuthForbidden  %+v", 403, o.Payload)
}

func (o *BasicAuthForbidden) GetPayload() *models.AuthorizationError {
	return o.Payload
}

func (o *BasicAuthForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthorizationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBasicAuthNotFound creates a BasicAuthNotFound with default headers values
func NewBasicAuthNotFound() *BasicAuthNotFound {
	return &BasicAuthNotFound{}
}

/*BasicAuthNotFound handles this case with default header values.

Not found error.
*/
type BasicAuthNotFound struct {
	Payload *models.NotFoundError
}

func (o *BasicAuthNotFound) Error() string {
	return fmt.Sprintf("[PATCH /users][%d] basicAuthNotFound  %+v", 404, o.Payload)
}

func (o *BasicAuthNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *BasicAuthNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBasicAuthInternalServerError creates a BasicAuthInternalServerError with default headers values
func NewBasicAuthInternalServerError() *BasicAuthInternalServerError {
	return &BasicAuthInternalServerError{}
}

/*BasicAuthInternalServerError handles this case with default header values.

Internal server error.
*/
type BasicAuthInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *BasicAuthInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /users][%d] basicAuthInternalServerError  %+v", 500, o.Payload)
}

func (o *BasicAuthInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *BasicAuthInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
