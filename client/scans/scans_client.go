// Code generated by go-swagger; DO NOT EDIT.

package scans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new scans API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scans API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateScan creates and triggers a new environment scan

Creates and triggers a new environment scan.
*/
func (a *Client) CreateScan(params *CreateScanParams, authInfo runtime.ClientAuthInfoWriter) (*CreateScanCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createScan",
		Method:             "POST",
		PathPattern:        "/scans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateScanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateScanCreated), nil

}

/*
GetComplianceByResourceTypes lists compliance results by resource type for a scan

Lists compliance results by resource type for a scan.
*/
func (a *Client) GetComplianceByResourceTypes(params *GetComplianceByResourceTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetComplianceByResourceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceByResourceTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getComplianceByResourceTypes",
		Method:             "GET",
		PathPattern:        "/scans/{scan_id}/compliance_by_resource_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceByResourceTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetComplianceByResourceTypesOK), nil

}

/*
GetComplianceByRules lists compliance results by rule for a scan

Lists compliance results by rule for a scan.
*/
func (a *Client) GetComplianceByRules(params *GetComplianceByRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetComplianceByRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceByRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getComplianceByRules",
		Method:             "GET",
		PathPattern:        "/scans/{scan_id}/compliance_by_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceByRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetComplianceByRulesOK), nil

}

/*
GetScan retrieves details for a scan

Retrieves details for a scan.
*/
func (a *Client) GetScan(params *GetScanParams, authInfo runtime.ClientAuthInfoWriter) (*GetScanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScan",
		Method:             "GET",
		PathPattern:        "/scans/{scan_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetScanOK), nil

}

/*
ListScans lists scans for an environment

Lists scans for an environment.
*/
func (a *Client) ListScans(params *ListScansParams, authInfo runtime.ClientAuthInfoWriter) (*ListScansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListScansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listScans",
		Method:             "GET",
		PathPattern:        "/scans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListScansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListScansOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
