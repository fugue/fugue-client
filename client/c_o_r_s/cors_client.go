// Code generated by go-swagger; DO NOT EDIT.

package c_o_r_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new c o r s API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for c o r s API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	OptionsRules(params *OptionsRulesParams) (*OptionsRulesOK, error)

	OptionsRulesRuleID(params *OptionsRulesRuleIDParams) (*OptionsRulesRuleIDOK, error)

	OptionsRulesTest(params *OptionsRulesTestParams) (*OptionsRulesTestOK, error)

	OptionsRulesTestInput(params *OptionsRulesTestInputParams) (*OptionsRulesTestInputOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  OptionsRules cs o r s support

  Enable CORS by returning correct headers.

*/
func (a *Client) OptionsRules(params *OptionsRulesParams) (*OptionsRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OptionsRules",
		Method:             "OPTIONS",
		PathPattern:        "/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OptionsRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionsRulesRuleID cs o r s support

  Enable CORS by returning correct headers.

*/
func (a *Client) OptionsRulesRuleID(params *OptionsRulesRuleIDParams) (*OptionsRulesRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsRulesRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OptionsRulesRuleID",
		Method:             "OPTIONS",
		PathPattern:        "/rules/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OptionsRulesRuleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsRulesRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsRulesRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionsRulesTest cs o r s support

  Enable CORS by returning correct headers.

*/
func (a *Client) OptionsRulesTest(params *OptionsRulesTestParams) (*OptionsRulesTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsRulesTestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OptionsRulesTest",
		Method:             "OPTIONS",
		PathPattern:        "/rules/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OptionsRulesTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsRulesTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsRulesTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionsRulesTestInput cs o r s support

  Enable CORS by returning correct headers.

*/
func (a *Client) OptionsRulesTestInput(params *OptionsRulesTestInputParams) (*OptionsRulesTestInputOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsRulesTestInputParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OptionsRulesTestInput",
		Method:             "OPTIONS",
		PathPattern:        "/rules/test/input",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OptionsRulesTestInputReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsRulesTestInputOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsRulesTestInput: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
